#define _CRT_SECURE_NO_WARNINGS
#include"game.h"
void InitBoard(char board[ROWS][COLS], int rows, int cols, char set)
{
	int i, j;
	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			board[i][j] = set;
		}
	}
}

void DisplayBoard(char board[ROWS][COLS], int row, int col)
{
	int i, j;
	printf("------------------------\n");
	for (i = 0; i <= col; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for (j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}	
	printf("-----------------------------------\n");
}

void SetMine(char board[ROWS][COLS], int row, int col)
{
	int count = EASY_COUNT;
	while (count)
	{
		int x = rand() % row + 1;
		int y = rand() % col + 1;
		if (board[x][y] != '1')
		{
			board[x][y] = '1';
			count--;
		}
	}
}

int GetMineCount(char mine[ROWS][COLS], int x, int y)
{
	int i, j;
	int count = 0;
	for (i = x - 1; i <= i + 1; i++)
	{
		for (j = y - 1; j <= y + 1; j++)
		{
			if(mine[i][j] == '1')
			{
				count++;
			}
		}
		return count;
	}
}


void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int win = 0;//非雷的个数
	while (win < ROW*COL -EASY_COUNT)
	{
		printf("请输入坐标\n");
		scanf("%d %d", &x, &y);
		if (x > 0 && x <= row && y > 0 && y <=col)
		{
			if (mine[x][y] == '1')
			{
				printf("end!!!\n");
				DisplayBoard(mine, ROW, COL);
				break;
			}
			else
			{
				if (show [x][y] != '*')
				{
					printf("已经选过了\n");
						continue;
				}
				else
				{
					win++;
					int count = GetMineCount(mine, x, y);
					show[x][y] = count + '0';
					DisplayBoard(show, ROW, COL);
				}
				
			}
		}
		else
		{
			printf("坐标非法");
		}
	}
	if (win == row * col - EASY_COUNT)
	{
		printf("成功排完\n");
		DisplayBoard(mine, row, col);
	}
}
